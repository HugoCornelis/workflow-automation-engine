#!/usr/bin/perl -w

package Command;

use strict;

use warnings;

# set your PYTHONPATH to include the appropriate directories if this is needed
#
# export PYTHONPATH=$HOME/projects/my-python-modules-directory

BEGIN
{
	if (not exists $ENV{PYTHONPATH})
	{
		$ENV{PYTHONPATH} = "/home/hugoc/projects/add-your-python-directory-here";
	}
}

use Inline Python => <<'PYTHON';

# sys.path.append('/path/to/search')

import io
import os
import sys

execute_command = None
execute_command_array = None

def assign_functions(exe_command, exe_command_array):
    global execute_command
    global execute_command_array
    execute_command = exe_command
    execute_command_array = exe_command_array

def add(x,y):
   return x + y

def subtract(x,y):
   return x - y

def python_examples_python_command(argv):
    command = "echo 'python_command from bash (1)'"
    execute_command(command)
    command_array = [
        "echo 'python_command from bash (2)'",
        "echo 'python_command from bash (3)'"
    ]
    execute_command_array(command_array)

def python_examples_python_command_help(command, perl_argv):
    return f"python_python_command {command} help page"

PYTHON


assign_functions(\&Command::execute_shell_command, \&Command::execute_shell_command_array);

sub python_examples_single_command
{
	# print "9 + 16 = ", add(9, 16), "\n";
	# print "9 - 16 = ", subtract(9, 16), "\n";

	my $added = add(9, 16);

	my $subtracted = subtract(9, 16);

    my $command = "echo added is $added and subtracted is $subtracted";

    execute_shell_command($command);
}


sub python_examples_single_command_help
{
    my $command = shift;

    return "$command: this module shows how to inline python code in perl.

It is both possible to use python function definitions as workflow
targets and commands and to call the python code from perl.

These examples define a target with name 'python_examples' and with these commands:

'single_command' is implemented in perl and uses two python functions 'add' and 'subtract'..

'python_stdout': is implemented in python and writes a string to stdout.

'python_command': is implemented in python and writes a string to stdout and has a help function (use -- --help as usual to invoke it).

";
}


# return success

1;


