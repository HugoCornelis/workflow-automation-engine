#!/usr/bin/perl -w

use strict;

use warnings;


package main;

our $option_verbose;

our $global_technical_project_configuration;


package Command;


sub features_annotations
{
    my $commands
	= [
	   'pwd',
	   'cd /bin',
	   'pwd',
	  ];

    execute_shell_command_array
	(
	 $commands,
	 {
	  annotation => "Three commands, one changes the current working directory.",
	 },
	);
}


sub features_cd_tests
{
    # Some options to command execution:
    #   allow_fail: allow execution of this command to fail.
    #   dry_run: do not execute this command.
    #   remote: a remote that is defined in feature-testing-configuration.
    #   quiet: do not provide feedback to the terminal about this command.
    #   sudo: invoke the command prefixed with sudo.
    #   timeout: this command will fail after the given timeout.
    #   use_bash: use bash to invoke the command because it uses specific bash functions or features.
    #
    # execute_shell_command($command, { remote => '<name of a remote that is defined in feature-testing-configuration>, } );
    #
    # These options can given to any of the functions that execute commands.

    my $commands
	= [
	   'pwd',
	   'cd bin',
	   'pwd',
	   'cd ..',
	   'pwd',
	   'cd /',
	   'pwd',
	  ];

    execute_shell_command_array($commands);
}


sub features_cd_tests_help
{
    my $command = shift;

    return "$command: Test the 'cd' features.

SYNOPSIS: $command

This command is used for testing of the internal 'cd' command.

In addition, it is also used for testing of the '--export-help-page' option.

This help page is implemented with the 'features_cd_tests_help' sub.
This sub documents the command line arguments and options:

    ARGV[0]: The directory to which to change.

 "; }


our $target_servers = $::global_technical_project_configuration->{target_servers};

sub features_cd_tests_ssh
{
    my $remote = $target_servers->{ssh_cd};

    # make sure this works from localhost and from inside a docker test container

    my $ssh_server = `hostname -i`;

    chomp $ssh_server;

    $remote->{ssh_server} = $ssh_server;

    my $remote_commands
	= [
	   'pwd',
	   'cd /bin',
	   'pwd',
	   'cd ..',
	   'pwd',
	   'cd /',
	   'pwd',
	  ];

    execute_shell_command_array
	(
	 $remote_commands,
	 {
	  remote => $remote,
	 },
	);
}


sub features_cd_tests_tmux
{
    my $remote = $target_servers->{tmux_cd};

    my $remote_commands
	= [
	   'pwd >>/tmp/tmux-pwd.txt',
	   'cd bin',
	   'pwd >>/tmp/tmux-pwd.txt',
	   'cd ..',
	   'pwd >>/tmp/tmux-pwd.txt',
	   'cd /',
	   'pwd >>/tmp/tmux-pwd.txt',
	  ];

    execute_shell_command_array
	(
	 $remote_commands,
	 {
	  remote => $remote,
	 },
	);
}


sub features_export_sh
{
    my $remote_tmux = $target_servers->{tmux_cd};

    my $remote_ssh = $target_servers->{ssh_cd};

    # make sure this works from localhost and from inside a docker test container

    my $ssh_server = `hostname -i`;

    chomp $ssh_server;

    $remote_ssh->{ssh_server} = $ssh_server;

    my $commands
	= [
	   'pwd',
	   'cd /bin',
	   'pwd',
	  ];

    execute_shell_command_array($commands);

    execute_shell_command_array
	(
	 $commands,
	 {
	  remote => $remote_ssh,
	 },
	);

    execute_shell_command_array
	(
	 $commands,
	 {
	  remote => $remote_tmux,
	 },
	);
}


sub features_export_variables
{
    my $commands
	= [
	   "cd $ENV{HOME}",
	   "cd /some/directory",
	  ];

    execute_shell_command_array($commands);
}


sub features_remote_script_execution
{
    my $shell_script_filename = "scripts/feature-shell-script-remote arg1 arg2";

    my $remote_ssh = $target_servers->{ssh_cd};

    execute_shell_script_remote($shell_script_filename, { remote => $remote_ssh } );
}


sub features_timestamps
{
    my $commands
	= [
	   'pwd',
	  ];

    execute_shell_command_array
	(
	 $commands,
	 {
	  timestamp => 1,
	 },
	);

    execute_shell_command_array
	(
	 $commands,
	 {
	  timestamp => 'some suffix with spaces',
	 },
	);

    execute_shell_command_array
	(
	 $commands,
	 {
	  timestamp => {
			content_format => 'Return code: %%RETURNCODE%%',
			filename_suffix => 'suffix_with spaces and file with content',
		       },
	 },
	);
}


# return success

1;


