---
# Target servers identify roles that execute command on different hosts.
# Each host has a 'remote_policy' that is prefixed to the command to be executed.
# For some roles the remote_policy is dynamically built.  A typical example is an remote ssh server.
#
# A role that has a 'localuser' set to 'yes' has no remote_policy.
#
# A tmux remote_policy requires its name to have a 'tmux_' prefix.
# This is recognized by the workflow engine and, for instance, allows tmux sessions to be automatically created.

target_servers:
  build:
    description: your build server that does builds and is used for testing
    name: build
    ssh_server: build.your.local.domain
    ssh_user: tester
  docker_build:
    description: interaction with the docker build container
    name: docker_build
    remote_policy: 'docker exec -it --workdir ~/projects/digital-engineering/source/build gitlab_interactive '
  laptop:
    description: the local computer of the developer
    localuser: yes
    name: laptop
    ssh_port: 22
    ssh_server: 192.168.4.70
    ssh_user: hugo
  ssh_cd:
    description: interaction with the combined ssh to test cd commands
    name: ssh_cd
    ssh_options: -o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
    ssh_password: harness
    ssh_port: 22
    ssh_server: 172.18.0.22
    ssh_user: root
  tmux_cd:
    description: interaction with the tmux session to test cd commands
    name: tmux_cd
    remote_policy: 'tmux send-keys -t cd '
  tmux_ssh_cd:
    description: interaction with the combined ssh / tmux session to test cd commands
    name: tmux_ssh_cd
    remote_policy1: 'ssh -o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@172.17.0.2 tmux send-keys -t ssh_cd '
    remote_policy: 'tmux send-keys -t ssh_cd '
    ssh_options: -o LogLevel=ERROR -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
    ssh_password: harness
    ssh_port: 22
    ssh_server: 172.18.0.22
    ssh_user: root
